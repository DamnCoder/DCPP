cmake_minimum_required(VERSION 3.1)

# MACROS
MACRO(SOURCE_GROUP_BY_FOLDER FILE_GROUP)

	SET(SOURCE_GROUP_DELIMITER "/")
	SET(last_dir "")
	SET(files "")

	FOREACH(file ${FILE_GROUP})

		#FILE(RELATIVE_PATH relative_file ${ROOT_CPP_PATH} ${file})
		#GET_FILENAME_COMPONENT(dir "${relative_file}" PATH)
		GET_FILENAME_COMPONENT(dir "${file}" PATH)
		#MESSAGE(STATUS ${dir})

		IF (NOT "${dir}" STREQUAL "${last_dir}")
			
			IF (files)
				SOURCE_GROUP("${last_dir}" FILES ${files})
			ENDIF (files)
			
			SET(files "")

		ENDIF (NOT "${dir}" STREQUAL "${last_dir}")
		
		SET(files ${files} ${file})
		SET(last_dir "${dir}")

	ENDFOREACH(file)

	IF (files)
		SOURCE_GROUP("${last_dir}" FILES ${files})
	ENDIF (files)

ENDMACRO(SOURCE_GROUP_BY_FOLDER)

#[PROJECT_NAME]

#[BUILD_TYPE]

# Set the output folders where the program will be created
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../cmake_modules)
SET(EXTERNALS_PATH ${PROJECT_SOURCE_DIR}/../externals)

# FindSDL2.cmake
FIND_PACKAGE(SDL2 REQUIRED)
INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR})

FIND_PACKAGE(OpenGL REQUIRED)
INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})

#[PRJ_INCLUDE]

#[PRJ_HEADER_FILES]

#[PRJ_SOURCE_FILES]

# Generate the static library from the sources
ADD_LIBRARY(${PROJECT_NAME} STATIC ${SOURCES} ${HEADERS})

#[ORGANIZATION]

SOURCE_GROUP_BY_FOLDER("${SOURCES}")
SOURCE_GROUP_BY_FOLDER("${HEADERS}")

#[EXTERNAL_PROJECTS]
ADD_SUBDIRECTORY(${EXTERNALS_PATH}/dcpp_signals/project ${PROJECT_BINARY_DIR}/dcpp_signals)
INCLUDE_DIRECTORIES(${EXTERNALS_PATH}/dcpp_signals/project/include)

ADD_SUBDIRECTORY(${EXTERNALS_PATH}/dcpp_math/project ${PROJECT_BINARY_DIR}/dcpp_math)
INCLUDE_DIRECTORIES(${EXTERNALS_PATH}/dcpp_math/project/include)

ADD_SUBDIRECTORY(${EXTERNALS_PATH}/stb_image/project ${PROJECT_BINARY_DIR}/stb_image)
INCLUDE_DIRECTORIES(${EXTERNALS_PATH}/stb_image/project/include)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
	${SDL2_LIBRARY}
	${OPENGL_LIBRARIES}
)

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 11
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)
 
# Set the location for library installation
# Use "sudo make install" to apply
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${LIBRARY_OUTPUT_PATH})
INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/include DESTINATION ${LIBRARY_OUTPUT_PATH})